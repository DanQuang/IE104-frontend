import { useSelector } from "react-redux";
import { useEffect, useRef } from "react";
import { Cpu } from "@phosphor-icons/react";
import { Separator } from "@radix-ui/react-dropdown-menu";
import { marked } from "marked";
import hljs from "highlight.js";
import { StackIcon } from "@radix-ui/react-icons";
import Message from "../Message/Message";

const ChatArea = ({ chatId, chunks }) => {
  const { messagesByChatId } = useSelector((state) => state.chat);

  // L·∫•y tin nh·∫Øn m·ªôt c√°ch an to√†n
  const messages = messagesByChatId[chatId] || [];

  const chatRef = useRef(null);

  const renderer = new marked.Renderer();
  renderer.code = (code, language) => {
    const validLanguage = hljs.getLanguage(language) ? language : "plaintext";
    return `<pre><code class="language-${validLanguage}">${hljs.highlight(validLanguage, code).value}</code></pre>`;
  };
  marked.setOptions({ renderer });

  const html = chunks ? marked(chunks) : ""; // X·ª≠ l√Ω n·∫øu chunks l√† undefined

  useEffect(() => {
    // Ki·ªÉm tra n·∫øu chatRef c√≥ s·∫µn tr∆∞·ªõc khi cu·ªôn
    if (chatRef.current) {
      // ƒê·∫£m b·∫£o cu·ªôn x·∫£y ra sau khi component ƒë∆∞·ª£c c·∫≠p nh·∫≠t
      chatRef.current.scrollTop = chatRef.current.scrollHeight;
    }
  }, [messages, chunks, chatId]); // Ph·ª• thu·ªôc v√†o c·∫£ messages, chunks v√† chatId ƒë·ªÉ k√≠ch ho·∫°t cu·ªôn khi thay ƒë·ªïi chat

  return (
    <div
      ref={chatRef}
      className="flex-1 overflow-y-scroll overflow-x-hidden py-5 px-2 md:p-5"
    >
      {messages.length === 0 && (
        <div className="pb-[200px] pt-4 md:pt-10">
          <div className="mx-auto max-w-2xl px-4 flex flex-col items-center gap-5">
            <StackIcon className="w-20 h-20" />
            <div className="rounded-lg border border-foreground/15 bg-tertiary p-8">
              <h1 className="mb-2 text-lg font-semibold">
                Welcome to Vietnamese Law AI Chatbot!
              </h1>
              <p className="mb-2 text-muted-foreground">
                L√∫c b·∫°n t√¨m ƒë·∫øn t√¥i th√¨ ch·∫Øc b·∫°n c≈©ng ƒë√£ ph·∫°m m·ªôt l·ªói l·∫ßm n√†o ƒë√≥ c√≥ th·ªÉ li√™n quan t·ªõi ph√°p l√Ω. H√£y ƒë·ªÉ t√¥i an ·ªßi t√¢m h·ªìn c·ªßa b·∫°n b·∫±ng th√¥ng tin nh·ªØng b·∫£n √°n b·∫°n c√≥ th·ªÉ nh·∫≠n. üòÑ
              </p>
            </div>
          </div>
        </div>
      )}

      {messages.length > 0 &&
        messages.map((message) => (
          <Message key={message.id} message={message} />
        ))}

      {chunks && (
        <div className="max-w-2xl mx-auto">
          <div className="flex space-x-5">
            <div className="w-10 h-10 rounded-full border flex items-center justify-center p-1">
              <Cpu size={32} />
            </div>
            <div className="flex flex-col">
              <h2 className="font-semibold">ChatBot</h2>
              <p className="pt-1 whitespace-pre-wrap">
                {/* Render the markdown as HTML safely */}
                <div
                  className="whitespace-pre-wrap"
                  dangerouslySetInnerHTML={{ __html: html }}
                />
              </p>
            </div>
          </div>
          <Separator className="mb-5 w-full my-5" />
        </div>
      )}
    </div>
  );
};

export default ChatArea;
